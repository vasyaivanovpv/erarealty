const Scene = require("telegraf/scenes/base");

const limitEmailSymbols = 40;

const stepEmail = new Scene("step_email");

stepEmail.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üìß *Email* \n\n–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: ivanovvasiliy@gmail.com`
  );
});

stepEmail.start(async (ctx) => {
  await ctx.scene.enter("public_main_menu");
});

stepEmail.on("text", async (ctx) => {
  if (ctx.message.text.length > limitEmailSymbols)
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );

  ctx.session.applyMortgage.email = ctx.message.text;

  return ctx.scene.enter("step_agreement");
});

stepEmail.use(async (ctx) =>
  ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É!`)
);

module.exports = stepEmail;
