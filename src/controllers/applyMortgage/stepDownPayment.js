const Scene = require("telegraf/scenes/base");
const { textBlockLimits } = require("../../constants");
const { isInteger } = require("../../utils");

const stepDownPayment = new Scene("step_down_payment");

stepDownPayment.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üí≤ *–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å* \n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 225000`
  );
});

stepDownPayment.start(async (ctx) => {
  await ctx.scene.enter("public_main_menu");
});

stepDownPayment.on("text", async (ctx) => {
  if (ctx.message.text.length > textBlockLimits.PRICE) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );
  }

  const downPayment = Number(ctx.message.text);

  if (!isInteger(downPayment)) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ!`
    );
  }

  ctx.session.applyMortgage.downPayment = downPayment;

  return ctx.scene.enter("step_fio");
});

stepDownPayment.use(async (ctx) => {
  return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å!`);
});

module.exports = stepDownPayment;
