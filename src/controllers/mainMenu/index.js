const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const { typesQuery } = require("../../constants");
const {
  checkJSONmw,
  getAutopostingStatusStr,
  accessMainMenuMW,
} = require("../../helpers");

const ObjectRe = require("../../models/ObjectRe");
const Options = require("../../models/Options");

const checkContact = (options) =>
  options &&
  options.contact.name &&
  options.contact.email &&
  options.contact.phones.length;

const mainMenu = new Scene("main_menu");

mainMenu.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

mainMenu.enter(accessMainMenuMW, async (ctx) => {
  delete ctx.session.post;
  delete ctx.session.editObjectRe;

  const optionsDB = (await Options.findOne()) || (await Options.create({}));
  const objectReCount = await ObjectRe.estimatedDocumentCount();
  const activeObjectReCount = await ObjectRe.countDocuments({
    isArchived: false,
  });
  const archiveObjectReCount = await ObjectRe.countDocuments({
    isArchived: true,
  });

  const autopostingStatusStr = getAutopostingStatusStr(
    optionsDB.autopostingStatus
  );

  await ctx.replyWithMarkdown(
    `üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* \n\n–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ${autopostingStatusStr} \n\n–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ 16:45 \n–æ–±—ä–µ–∫—Ç ‚Ññ 1608812148905 \n\n–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ 19:15 \n–æ–±—ä–µ–∫—Ç ‚Ññ 1608812148905 \n\n–û–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \n–ê–∫—Ç–∏–≤–Ω—ã–µ: *${activeObjectReCount}* \n–í –∞—Ä—Ö–∏–≤–µ: ${archiveObjectReCount} \n–í—Å–µ–≥–æ: ${objectReCount} \n\n_–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç /start_`,
    Markup.inlineKeyboard([
      [
        Markup.callbackButton(
          "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç",
          JSON.stringify({ type: typesQuery.ADD_OBJECT })
        ),
      ],
      [
        Markup.callbackButton(
          "–í—Å–µ –æ–±—ä–µ–∫—Ç—ã",
          JSON.stringify({ type: typesQuery.ALL_OBJECTS })
        ),
      ],
      [
        Markup.callbackButton(
          "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
          JSON.stringify({ type: typesQuery.SETTINGS })
        ),
      ],
    ]).extra()
  );
});

mainMenu.on("callback_query", checkJSONmw, async (ctx) => {
  const { type } = JSON.parse(ctx.callbackQuery.data);

  let options;

  switch (type) {
    case typesQuery.ADD_OBJECT:
      options = await Options.findOne({}, "contact");
      if (!checkContact(options)) {
        await ctx.answerCbQuery();
        return ctx.replyWithMarkdown(
          "‚ùóÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–π—Ç–∏! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≤ –º–µ–Ω—é *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*."
        );
      }

      await ctx.answerCbQuery("–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç");
      return ctx.scene.enter("step_object_re_type");

    case typesQuery.ALL_OBJECTS:
      options = await Options.findOne({}, "contact");
      if (!checkContact(options)) {
        await ctx.answerCbQuery();
        return ctx.replyWithMarkdown(
          "‚ùóÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–π—Ç–∏! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≤ –º–µ–Ω—é *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*."
        );
      }

      const objectReCount = await ObjectRe.estimatedDocumentCount();
      if (!objectReCount) {
        await ctx.answerCbQuery("‚ùóÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!");
        return ctx.replyWithMarkdown(`‚ùóÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!`);
      }

      await ctx.answerCbQuery("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã");
      return ctx.scene.enter("step_object_list");

    case typesQuery.MAIN_MENU:
      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");

    case typesQuery.SETTINGS:
      await ctx.answerCbQuery();
      return ctx.scene.enter("settings");

    default:
      await ctx.replyWithMarkdown(
        `‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`
      );
      break;
  }

  await ctx.answerCbQuery();
});

mainMenu.use(async (ctx) => {
  await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`);
});

module.exports = mainMenu;
