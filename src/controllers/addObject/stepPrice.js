const Scene = require("telegraf/scenes/base");
const { textBlockLimits } = require("../../constants");
const { isInteger } = require("../../utils");

const stepPrice = new Scene("step_price");

stepPrice.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üí≤ *–°—Ç–æ–∏–º–æ—Å—Ç—å* \n\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2255000`
  );
});

stepPrice.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepPrice.on("text", async (ctx) => {
  if (ctx.message.text.length > textBlockLimits.PRICE) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );
  }

  const price = Number(ctx.message.text);

  if (!isInteger(price)) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ!`
    );
  }

  ctx.session.post.price = price;

  return ctx.scene.enter("step_district");
});

stepPrice.use(async (ctx) => {
  return ctx.replyWithMarkdown(
    `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!`
  );
});

module.exports = stepPrice;
