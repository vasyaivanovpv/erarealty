const Scene = require("telegraf/scenes/base");
const rateLimit = require("telegraf-ratelimit");
const Markup = require("telegraf/markup");
const { typesQuery, objectReTypes } = require("../../constants");
const {
  createCaption,
  checkJSONmw,
  accessMainMenuMW,
} = require("../../helpers");

const User = require("../../models/User");
const ObjectRe = require("../../models/ObjectRe");
const District = require("../../models/District");

const limitConfig = {
  window: 1000,
  limit: 1,
  keyGenerator: function (ctx) {
    return ctx.chat.id;
  },
  onLimitExceeded: async (ctx) =>
    await ctx.reply("‚ùóÔ∏è –ù–µ —Å—Ç–æ–∏—Ç —Ç–∞–∫ —Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"),
};

const stepSaveObjectRe = new Scene("step_save_object_re");

stepSaveObjectRe.use(rateLimit(limitConfig));

stepSaveObjectRe.enter(accessMainMenuMW, async (ctx) => {
  const { post } = ctx.session;

  ctx.session.post.point = new Date().getTime();

  const caption = await createCaption(post);

  if (typeof post.photo === "string") {
    await ctx.replyWithPhoto(post.photo, {
      caption: caption,
      parse_mode: "MarkdownV2",
    });
  } else if (Array.isArray(post.photo)) {
    const photoObj = post.photo.map((file) => ({
      type: "photo",
      media: file,
    }));
    photoObj[0].caption = caption;
    photoObj[0].parse_mode = "MarkdownV2";
    await ctx.replyWithMediaGroup(photoObj);
  }

  return ctx.replyWithMarkdown(
    `üëç *–ü—É–±–ª–∏–∫–∞—Ü–∏—è* \n\n–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.* \n\n_–°–æ—Ö—Ä–∞–Ω–∏—Ç—å_ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. \n_–û—Ç–º–µ–Ω–∏—Ç—å_ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`,
    Markup.inlineKeyboard([
      Markup.callbackButton(
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        JSON.stringify({ type: typesQuery.SEND })
      ),
      Markup.callbackButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å",
        JSON.stringify({ type: typesQuery.MAIN_MENU })
      ),
    ]).extra()
  );
});

stepSaveObjectRe.start(async (ctx) => {
  return ctx.scene.enter("main_menu");
});

stepSaveObjectRe.on("callback_query", checkJSONmw, async (ctx) => {
  const { type } = JSON.parse(ctx.callbackQuery.data);

  switch (type) {
    case typesQuery.MAIN_MENU:
      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");

    case typesQuery.SEND:
      const { post } = ctx.session;

      const userDB = await User.findOne({ telegramId: ctx.from.id });

      const districtDB = await District.findOne({
        name: post.district,
      });

      const newPostParams = {
        date: new Date(),
        user: userDB,
        objectReType: post.objectReType,
        totalArea: post.totalArea,
        photo: post.photo,
        extra: post.extra,
        price: post.price,
        district: districtDB,
        address: post.address,
        phones: post.phones,
        point: post.point,
      };

      if (post.objectReType === objectReTypes.apart) {
        newPostParams.livingArea = post.livingArea;
        newPostParams.kitchenArea = post.kitchenArea;
        newPostParams.numberRooms = post.numberRooms;
        newPostParams.floor = {
          current: post.floor.current,
          total: post.floor.total,
        };
      }

      await ObjectRe.create(newPostParams);

      await ctx.answerCbQuery("–û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
      return ctx.editMessageText(
        `üëç *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ* \n\n–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —É–≤–∏–¥–µ—Ç—å –≤ –º–µ–Ω—é "–í—Å–µ –æ–±—ä–µ–∫—Ç—ã".`,
        Markup.inlineKeyboard([
          Markup.callbackButton(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            JSON.stringify({ type: typesQuery.MAIN_MENU })
          ),
        ]).extra({ parse_mode: "Markdown" })
      );
    default:
      await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏`);
      break;
  }

  await ctx.answerCbQuery();
});

stepSaveObjectRe.use(async (ctx) =>
  ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏`)
);

module.exports = stepSaveObjectRe;
