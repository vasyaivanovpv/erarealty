const Scene = require("telegraf/scenes/base");
const { textBlockLimits } = require("../../constants");
const { isInteger, toNumber } = require("../../utils");

const stepFloor = new Scene("step_floor");

stepFloor.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üèô *–≠—Ç–∞–∂* \n\n–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–º "/" –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ. \n\n–ü—Ä–∏–º–µ—Ä: 7/10`
  );
});

stepFloor.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepFloor.on("text", async (ctx) => {
  if (ctx.message.text.length > textBlockLimits.FLOOR) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );
  }

  const parseText = ctx.message.text.split("/");
  if (parseText.length < 2)
    return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!`);
  if (parseText.length > 2)
    return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!`);

  const currentFloor = toNumber(parseText[0]);
  if (!isInteger(currentFloor))
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "—ç—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã"!`
    );
  const totalFloor = toNumber(parseText[1]);
  if (!isInteger(totalFloor))
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ"!`
    );

  if (currentFloor > totalFloor) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π. –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ!`
    );
  }

  ctx.session.post.floor.current = currentFloor;
  ctx.session.post.floor.total = totalFloor;

  return ctx.scene.enter("step_photo");
});

stepFloor.use(async (ctx) => {
  return ctx.replyWithMarkdown(
    `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ!`
  );
});

module.exports = stepFloor;
