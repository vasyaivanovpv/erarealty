const Scene = require("telegraf/scenes/base");
const { isFloat, toNumber } = require("../../utils");
const { textBlockLimits } = require("../../constants");

const stepTotalArea = new Scene("step_total_area");

stepTotalArea.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üß∞ *–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å* \n\n–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 44.6`
  );
});

stepTotalArea.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepTotalArea.on("text", async (ctx) => {
  if (ctx.message.text.length > textBlockLimits.TOTAL_AREA) {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );
  }

  const area = toNumber(ctx.message.text);

  if (!isFloat(area))
    return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!`);

  ctx.session.post.totalArea = area;

  return ctx.scene.enter("step_photo");
});

stepTotalArea.use(async (ctx) => {
  return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å!`);
});

module.exports = stepTotalArea;
