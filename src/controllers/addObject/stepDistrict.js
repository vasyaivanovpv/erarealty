const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const { typesQuery } = require("../../constants");
const { checkJSONmw } = require("../../helpers");

const District = require("../../models/District");

const stepDistrict = new Scene("step_district");

stepDistrict.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üåê *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞–π–æ–Ω* \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å.`
  );
});

stepDistrict.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepDistrict.on("text", async (ctx) => {
  const { text } = ctx.message;

  const regExpDistrict = new RegExp(text, "i");
  const districtsDB = await District.find({
    name: { $regex: regExpDistrict },
  });

  if (districtsDB.length) {
    const ik = districtsDB.map((district) =>
      Markup.callbackButton(
        district.name,
        JSON.stringify({ type: typesQuery.DISTRICT, id: district._id })
      )
    );

    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è *–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è* \n\n–ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–π–æ–Ω—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π! \n\n_–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞._`,
      Markup.inlineKeyboard(ik, { columns: 1 }).extra()
    );
  } else {
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–π–Ω–æ–Ω–∞.`
    );
  }
});

stepDistrict.on("callback_query", checkJSONmw, async (ctx) => {
  const { type, id } = JSON.parse(ctx.callbackQuery.data);

  const districtDB = await District.findById(id);

  switch (type) {
    case typesQuery.DISTRICT:
      ctx.session.post.district = districtDB.name;

      await ctx.answerCbQuery(districtDB.name);
      return ctx.scene.enter("step_address");
    default:
      await ctx.replyWithMarkdown(
        `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞!`
      );
      break;
  }

  await ctx.answerCbQuery();
});

stepDistrict.use(async (ctx) => {
  return ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞!`);
});

module.exports = stepDistrict;
