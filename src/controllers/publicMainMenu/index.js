const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const { typesQuery } = require("../../constants");
const {
  checkJSONmw,
  createMiniCaption,
  accessPublicMenuMW,
} = require("../../helpers");

const ObjectRe = require("../../models/ObjectRe");

const publicMainMenu = new Scene("public_main_menu");

publicMainMenu.start(async (ctx) => {
  return ctx.scene.enter("public_main_menu");
});

publicMainMenu.enter(accessPublicMenuMW, async (ctx) => {
  ctx.session.applyMortgage = {
    point: 0,
    downPayment: 0,
    fio: "",
    age: 0,
    numberFamilyMembers: 0,
    seniority: "",
    phone: "",
    convenientTime: "",
    email: "",
  };

  if (!ctx.startPayload)
    return ctx.replyWithMarkdown(
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ü–µ–Ω–∑–µ, —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ t.me/realty\\_penza.`
    );

  ctx.session.applyMortgage.point = +ctx.startPayload;

  const objectReDB = await ObjectRe.findOne({ point: +ctx.startPayload });

  if (!objectReDB)
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω! \n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ t.me/realty\\_penza.`
    );

  const miniCaption = createMiniCaption(objectReDB);

  return ctx.replyWithMarkdown(
    `üè† *–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É* \n\n–ü–æ–¥–∞–≤ –∑–∞—è–≤–∫—É –Ω–∞ –∏–ø–æ—Ç–µ–∫—É –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∂–∏–ª—å—è, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ¬´–≠–†–ê¬ª –≥—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–∞–∏–ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∂–∏–ª—å—è. \n\n–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n${miniCaption} \n\n_–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç /start_`,
    Markup.inlineKeyboard([
      Markup.callbackButton(
        "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
        JSON.stringify({ type: typesQuery.APPLY_MORTGAGE })
      ),
    ]).extra()
  );
});

publicMainMenu.on("callback_query", checkJSONmw, async (ctx) => {
  const { type } = JSON.parse(ctx.callbackQuery.data);

  switch (type) {
    case typesQuery.APPLY_MORTGAGE:
      const scene = !ctx.session.applyMortgage.point
        ? "public_main_menu"
        : "step_down_payment";

      await ctx.answerCbQuery();
      return ctx.scene.enter(scene);

    default:
      await ctx.replyWithMarkdown(
        `‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É_.`
      );
      break;
  }

  await ctx.answerCbQuery();
});

publicMainMenu.use(async (ctx) => {
  if (!ctx.session.applyMortgage.point)
    return ctx.scene.enter("public_main_menu");
  await ctx.replyWithMarkdown(
    `‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É_.`
  );
});

module.exports = publicMainMenu;
