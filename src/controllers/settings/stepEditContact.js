const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const { typesQuery } = require("../../constants");
const { getContact } = require("../../helpers");

const Options = require("../../models/Options");

const stepEditContact = new Scene("step_edit_contact");

stepEditContact.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepEditContact.enter(async (ctx) => {
  const optionsDB = await Options.findOne({}, "contact");

  const { name, email, phones } = getContact(optionsDB.contact);

  await ctx.replyWithMarkdown(
    `üìí *–ö–æ–Ω—Ç–∞–∫—Ç—ã* \n\n–ù–∞–∏–º–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n${name} \n\nEMAIL:\n${email} \n\n–¢–ï–õ–ï–§–û–ù–´:\n${phones}`,
    Markup.inlineKeyboard([
      [
        Markup.callbackButton(
          "–†–µ–¥. –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
          JSON.stringify({ type: typesQuery.EDIT_NAME_COMPANY })
        ),
      ],
      [
        Markup.callbackButton(
          "–†–µ–¥. email",
          JSON.stringify({ type: typesQuery.EDIT_EMAIL })
        ),
        Markup.callbackButton(
          "–†–µ–¥. —Ç–µ–ª–µ—Ñ–æ–Ω",
          JSON.stringify({ type: typesQuery.EDIT_PHONE })
        ),
      ],
      [
        Markup.callbackButton(
          "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
          JSON.stringify({ type: typesQuery.SETTINGS })
        ),
      ],
    ]).extra()
  );
});

stepEditContact.on("callback_query", async (ctx) => {
  const { type } = JSON.parse(ctx.callbackQuery.data);

  switch (type) {
    case typesQuery.EDIT_NAME_COMPANY:
      await ctx.answerCbQuery();
      return ctx.scene.enter("step_edit_name_company");

    case typesQuery.EDIT_EMAIL:
      await ctx.answerCbQuery();
      return ctx.scene.enter("step_edit_email");

    case typesQuery.EDIT_PHONE:
      await ctx.answerCbQuery();
      return ctx.scene.enter("step_edit_all_phones");

    case typesQuery.ADD_MANAGER:
      await ctx.answerCbQuery();
      return ctx.scene.enter("step_add_manager");

    case typesQuery.SETTINGS:
      await ctx.answerCbQuery();
      return ctx.scene.enter("settings");

    default:
      await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ö–æ–Ω—Ç–∞–∫—Ç—ã_.`);
      break;
  }

  await ctx.answerCbQuery();
});

stepEditContact.use(async (ctx) => {
  await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ö–æ–Ω—Ç–∞–∫—Ç—ã_.`);
});

module.exports = stepEditContact;
