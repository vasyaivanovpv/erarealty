const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");

const { getItemList, getNumbersIK } = require("../../helpers");
const { typesQuery } = require("../../constants");

const User = require("../../models/User");

const moreBtns = [
  Markup.callbackButton(
    "–ü—Ä–∏–Ω—è—Ç—å",
    JSON.stringify({
      type: typesQuery.ACCEPT,
    })
  ),
];

const getAdminNamesStr = (adminsDB) => {
  const adminNamesStr = adminsDB.length
    ? getItemList(
        adminsDB.map((admin) =>
          [admin.firstName, admin.lastName].filter((v) => v).join(" ")
        )
      )
    : "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç.";

  return `üë• *–ê–¥–º–∏–Ω—ã* \n\n${adminNamesStr} \n\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º. –ß—Ç–æ–±—ã *—É–¥–∞–ª–∏—Ç—å* –∞–¥–º–∏–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –µ–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º.`;
};

const stepEditAdmins = new Scene("step_edit_admins");

stepEditAdmins.enter(async (ctx) => {
  const adminsDB = await User.find({}, "firstName lastName telegramId");
  const adminNamesStr = getAdminNamesStr(adminsDB);
  const ik = getNumbersIK(adminsDB, typesQuery.DELETE_ADMIN, moreBtns);

  const message = await ctx.replyWithMarkdown(adminNamesStr, ik);
  ctx.session.editAdminMessageId = message.message_id;
});

stepEditAdmins.leave(async (ctx) => {
  await ctx.telegram.editMessageReplyMarkup(
    ctx.chat.id,
    ctx.session.editAdminMessageId
  );
  delete ctx.session.editAdminMessageId;
});

stepEditAdmins.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepEditAdmins.on("text", async (ctx) => {
  await ctx.deleteMessage();

  if (ctx.message.forward_sender_name)
    return ctx.replyWithMarkdown(
      "‚ùóÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º. –£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å!"
    );
  if (!ctx.message.forward_from) return;
  if (ctx.message.forward_from.is_bot) return;

  const { editAdminMessageId } = ctx.session;
  const { id, first_name, last_name } = ctx.message.forward_from;

  await User.create({
    created: new Date(),
    telegramId: id,
    firstName: first_name,
    lastName: last_name,
  });

  const adminsDB = await User.find({}, "firstName lastName telegramId");
  const adminNamesStr = getAdminNamesStr(adminsDB);
  const ik = getNumbersIK(adminsDB, typesQuery.DELETE_ADMIN, moreBtns);

  return ctx.telegram.editMessageText(
    ctx.chat.id,
    editAdminMessageId,
    null,
    adminNamesStr,
    ik
  );
});

stepEditAdmins.on("callback_query", async (ctx) => {
  const { type, index } = JSON.parse(ctx.callbackQuery.data);

  switch (type) {
    case typesQuery.DELETE_ADMIN:
      const userDB = await User.findOne({ telegramId: index });

      if (userDB.isMainAdmin) return ctx.answerCbQuery("–í–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ —É–¥–∞–ª–∏—Ç—å!");

      await userDB.remove();

      const adminsDB = await User.find({}, "firstName lastName telegramId");
      const adminNamesStr = getAdminNamesStr(adminsDB);
      const ik = getNumbersIK(adminsDB, typesQuery.DELETE_ADMIN, moreBtns);

      await ctx.answerCbQuery();
      return ctx.editMessageText(adminNamesStr, ik);

    case typesQuery.ACCEPT:
      await ctx.answerCbQuery();
      return ctx.scene.enter("settings");

    default:
      await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ê–¥–º–∏–Ω—ã_.`);
      return ctx.answerCbQuery();
  }
});

stepEditAdmins.use(async (ctx) =>
  ctx.replyWithMarkdown(
    `‚ùóÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º!`
  )
);

module.exports = stepEditAdmins;
