const Scene = require("telegraf/scenes/base");
const Markup = require("telegraf/markup");
const {
  typesQuery,
  autopostingStatuses,
  markdownParseMode,
} = require("../../constants");
const {
  getContact,
  getAutopostingStatusStr,
  accessMainMenuMW,
} = require("../../helpers");
const { splitArray } = require("../../utils");
const agenda = require("../../agenda");

const Options = require("../../models/Options");
const User = require("../../models/User");
const ObjectRe = require("../../models/ObjectRe");

const mainSettingBtns = Markup.inlineKeyboard([
  [
    Markup.callbackButton(
      "–í–∫–ª—é—á–∏—Ç—å",
      JSON.stringify({ type: typesQuery.START_AUTOPOSTING })
    ),
    Markup.callbackButton(
      "–ù–∞ –ø–∞—É–∑—É",
      JSON.stringify({ type: typesQuery.PAUSE_AUTOPOSTING })
    ),
    Markup.callbackButton(
      "–í—ã–∫–ª—é—á–∏—Ç—å",
      JSON.stringify({ type: typesQuery.STOP_AUTOPOSTING })
    ),
  ],
  [
    Markup.callbackButton(
      "–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥",
      JSON.stringify({ type: typesQuery.EDIT_AUTOPOSTING })
    ),
    Markup.callbackButton(
      "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
      JSON.stringify({ type: typesQuery.EDIT_CONTACT })
    ),
  ],
  [
    Markup.callbackButton(
      "–ê–¥–º–∏–Ω—ã",
      JSON.stringify({ type: typesQuery.EDIT_ADMINS })
    ),
    Markup.callbackButton(
      "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
      JSON.stringify({ type: typesQuery.MAIN_MENU })
    ),
  ],
]).extra(markdownParseMode);

const getMainSettingText = (optionsDB) => {
  const { name, email, phones } = getContact(optionsDB.contact);
  const splitAutopostingTime = splitArray(optionsDB.autopostingTime, 4);

  const autopostingTimeStr = splitAutopostingTime.length
    ? splitAutopostingTime.reduce((acc, line, i, lines) => {
        const lineStr = line.join(", ");
        const breakSymnol = lines.length - 1 === i ? "" : ", \n";
        acc += `${lineStr}${breakSymnol}`;
        return acc;
      }, ``)
    : "_–ï—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ._";

  const autopostingStatusStr = getAutopostingStatusStr(
    optionsDB.autopostingStatus
  );

  return `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* \n\n–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ${autopostingStatusStr} \n\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (*${optionsDB.autopostingTime.length}* –ø–æ—Å—Ç/—Å—É—Ç–∫–∏): \n${autopostingTimeStr} \n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: \n${name} \n${email} \n${phones}`;
};

const settings = new Scene("settings");

settings.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

settings.enter(accessMainMenuMW, async (ctx) => {
  const optionsDB = await Options.findOne();

  const mainSettingText = getMainSettingText(optionsDB);

  await ctx.replyWithMarkdown(mainSettingText, mainSettingBtns);
});

settings.on("callback_query", async (ctx) => {
  const { type } = JSON.parse(ctx.callbackQuery.data);

  let optionsDB, mainSettingText, objectReCount;

  switch (type) {
    case typesQuery.START_AUTOPOSTING:
      objectReCount = await ObjectRe.estimatedDocumentCount();
      if (!objectReCount) return ctx.answerCbQuery("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!");

      optionsDB = await Options.findOne();
      if (!optionsDB.autopostingTime.length)
        return ctx.answerCbQuery("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π!");
      if (optionsDB.autopostingStatus === autopostingStatuses.start.name)
        return ctx.answerCbQuery(
          `–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ ${autopostingStatuses.start.text}!`
        );

      optionsDB.autopostingStatus = autopostingStatuses.start.name;
      await optionsDB.save();

      mainSettingText = getMainSettingText(optionsDB);

      await agenda.start();

      await agenda.now("init_post");

      await ctx.editMessageText(mainSettingText, mainSettingBtns);
      return ctx.answerCbQuery(
        `–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ${autopostingStatuses.start.text}!`
      );

    case typesQuery.STOP_AUTOPOSTING:
      optionsDB = await Options.findOne();
      if (optionsDB.autopostingStatus === autopostingStatuses.stop.name) {
        optionsDB.autopostingSkip = 0;
        await optionsDB.save();
        return ctx.answerCbQuery(
          `–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ ${autopostingStatuses.stop.text}!`
        );
      }

      optionsDB.autopostingStatus = autopostingStatuses.stop.name;
      optionsDB.autopostingSkip = 0;
      await optionsDB.save();

      mainSettingText = getMainSettingText(optionsDB);

      await agenda.cancel();
      await agenda.purge();
      await agenda.stop();

      await ctx.editMessageText(mainSettingText, mainSettingBtns);
      return ctx.answerCbQuery(`–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ${autopostingStatuses.stop.text}!`);

    case typesQuery.PAUSE_AUTOPOSTING:
      objectReCount = await ObjectRe.estimatedDocumentCount();
      if (!objectReCount) return ctx.answerCbQuery("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!");

      optionsDB = await Options.findOne();
      if (optionsDB.autopostingStatus === autopostingStatuses.pause.name)
        return ctx.answerCbQuery(
          `–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ ${autopostingStatuses.pause.text}!`
        );

      optionsDB.autopostingStatus = autopostingStatuses.pause.name;
      await optionsDB.save();

      mainSettingText = getMainSettingText(optionsDB);

      await agenda.cancel();
      await agenda.purge();
      await agenda.stop();

      await ctx.editMessageText(mainSettingText, mainSettingBtns);
      return ctx.answerCbQuery(
        `–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ${autopostingStatuses.pause.text}!`
      );

    case typesQuery.EDIT_CONTACT:
      await ctx.answerCbQuery();
      return ctx.scene.enter("step_edit_contact");

    case typesQuery.EDIT_AUTOPOSTING:
      await ctx.answerCbQuery();
      return ctx.scene.enter("step_edit_autoposting");

    case typesQuery.EDIT_ADMINS:
      const adminDB = await User.findOne({ telegramId: ctx.from.id });
      if (!adminDB.isMainAdmin) return ctx.answerCbQuery("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!");

      await ctx.answerCbQuery();
      return ctx.scene.enter("step_edit_admins");

    case typesQuery.MAIN_MENU:
      await ctx.answerCbQuery();
      return ctx.scene.enter("main_menu");

    default:
      await ctx.replyWithMarkdown(
        `‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`
      );
      break;
  }

  await ctx.answerCbQuery();
});

settings.use(async (ctx) => {
  await ctx.replyWithMarkdown(`‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é _–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_.`);
});

module.exports = settings;
