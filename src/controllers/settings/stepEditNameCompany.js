const Scene = require("telegraf/scenes/base");

const Options = require("../../models/Options");

const limitNameCompanySymbols = 40;

const stepEditNameCompany = new Scene("step_edit_name_company");

stepEditNameCompany.enter(async (ctx) => {
  return ctx.replyWithMarkdown(
    `üî° *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏* \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–≠–†–ê¬ª –≥—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π`
  );
});

stepEditNameCompany.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepEditNameCompany.on("text", async (ctx) => {
  if (ctx.message.text.length > limitNameCompanySymbols)
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞.`
    );

  await Options.updateOne({}, { "contact.name": ctx.message.text });

  return ctx.scene.enter("step_edit_contact");
});

stepEditNameCompany.use(async (ctx) =>
  ctx.replyWithMarkdown(`‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏!`)
);

module.exports = stepEditNameCompany;
